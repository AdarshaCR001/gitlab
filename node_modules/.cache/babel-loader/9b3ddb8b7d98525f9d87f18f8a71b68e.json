{"ast":null,"code":"\"use strict\";\n/*!\r\n * The MIT License\r\n   Copyright (c) 2018 Dmitriy Kubyshkin\r\n   Copied from https://github.com/grassator/insert-text-at-cursor\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Inserts the given text at the cursor. If the element contains a selection, the selection\r\n * will be replaced by the text.\r\n */\n\nfunction insertText(input, text) {\n  // Most of the used APIs only work with the field selected\n  input.focus(); // IE 8-10\n\n  if (document.selection) {\n    var ieRange = document.selection.createRange();\n    ieRange.text = text; // Move cursor after the inserted text\n\n    ieRange.collapse(false\n    /* to the end */\n    );\n    ieRange.select();\n    return;\n  } // Webkit + Edge\n\n\n  var isSuccess = document.execCommand(\"insertText\", false, text);\n\n  if (!isSuccess) {\n    var start = input.selectionStart;\n    var end = input.selectionEnd; // Firefox (non-standard method)\n\n    if (typeof input.setRangeText === \"function\") {\n      input.setRangeText(text);\n    } else {\n      if (canManipulateViaTextNodes(input)) {\n        var textNode = document.createTextNode(text);\n        var node = input.firstChild; // If textarea is empty, just insert the text\n\n        if (!node) {\n          input.appendChild(textNode);\n        } else {\n          // Otherwise we need to find a nodes for start and end\n          var offset = 0;\n          var startNode = null;\n          var endNode = null; // To make a change we just need a Range, not a Selection\n\n          var range = document.createRange();\n\n          while (node && (startNode === null || endNode === null)) {\n            var nodeLength = node.nodeValue.length; // if start of the selection falls into current node\n\n            if (start >= offset && start <= offset + nodeLength) {\n              range.setStart(startNode = node, start - offset);\n            } // if end of the selection falls into current node\n\n\n            if (end >= offset && end <= offset + nodeLength) {\n              range.setEnd(endNode = node, end - offset);\n            }\n\n            offset += nodeLength;\n            node = node.nextSibling;\n          } // If there is some text selected, remove it as we should replace it\n\n\n          if (start !== end) {\n            range.deleteContents();\n          } // Finally insert a new node. The browser will automatically\n          // split start and end nodes into two if necessary\n\n\n          range.insertNode(textNode);\n        }\n      } else {\n        // For the text input the only way is to replace the whole value :(\n        var value = input.value;\n        input.value = value.slice(0, start) + text + value.slice(end);\n      }\n    } // Correct the cursor position to be at the end of the insertion\n\n\n    input.setSelectionRange(start + text.length, start + text.length); // Notify any possible listeners of the change\n\n    var e = document.createEvent(\"UIEvent\");\n    e.initEvent(\"input\", true, false);\n    input.dispatchEvent(e);\n  }\n}\n\nexports.insertText = insertText;\n\nfunction canManipulateViaTextNodes(input) {\n  if (input.nodeName !== \"TEXTAREA\") {\n    return false;\n  }\n\n  var browserSupportsTextareaTextNodes;\n\n  if (typeof browserSupportsTextareaTextNodes === \"undefined\") {\n    var textarea = document.createElement(\"textarea\");\n    textarea.value = \"1\";\n    browserSupportsTextareaTextNodes = !!textarea.firstChild;\n  }\n\n  return browserSupportsTextareaTextNodes;\n}","map":{"version":3,"sources":["E:/Navneeth_Study/React Practice Codes/gitlab/node_modules/react-mde/lib/js/util/InsertTextAtPosition.js"],"names":["Object","defineProperty","exports","value","insertText","input","text","focus","document","selection","ieRange","createRange","collapse","select","isSuccess","execCommand","start","selectionStart","end","selectionEnd","setRangeText","canManipulateViaTextNodes","textNode","createTextNode","node","firstChild","appendChild","offset","startNode","endNode","range","nodeLength","nodeValue","length","setStart","setEnd","nextSibling","deleteContents","insertNode","slice","setSelectionRange","e","createEvent","initEvent","dispatchEvent","nodeName","browserSupportsTextareaTextNodes","textarea","createElement"],"mappings":"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","sourcesContent":["\"use strict\";\r\n/*!\r\n * The MIT License\r\n   Copyright (c) 2018 Dmitriy Kubyshkin\r\n   Copied from https://github.com/grassator/insert-text-at-cursor\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Inserts the given text at the cursor. If the element contains a selection, the selection\r\n * will be replaced by the text.\r\n */\r\nfunction insertText(input, text) {\r\n    // Most of the used APIs only work with the field selected\r\n    input.focus();\r\n    // IE 8-10\r\n    if (document.selection) {\r\n        var ieRange = document.selection.createRange();\r\n        ieRange.text = text;\r\n        // Move cursor after the inserted text\r\n        ieRange.collapse(false /* to the end */);\r\n        ieRange.select();\r\n        return;\r\n    }\r\n    // Webkit + Edge\r\n    var isSuccess = document.execCommand(\"insertText\", false, text);\r\n    if (!isSuccess) {\r\n        var start = input.selectionStart;\r\n        var end = input.selectionEnd;\r\n        // Firefox (non-standard method)\r\n        if (typeof input.setRangeText === \"function\") {\r\n            input.setRangeText(text);\r\n        }\r\n        else {\r\n            if (canManipulateViaTextNodes(input)) {\r\n                var textNode = document.createTextNode(text);\r\n                var node = input.firstChild;\r\n                // If textarea is empty, just insert the text\r\n                if (!node) {\r\n                    input.appendChild(textNode);\r\n                }\r\n                else {\r\n                    // Otherwise we need to find a nodes for start and end\r\n                    var offset = 0;\r\n                    var startNode = null;\r\n                    var endNode = null;\r\n                    // To make a change we just need a Range, not a Selection\r\n                    var range = document.createRange();\r\n                    while (node && (startNode === null || endNode === null)) {\r\n                        var nodeLength = node.nodeValue.length;\r\n                        // if start of the selection falls into current node\r\n                        if (start >= offset && start <= offset + nodeLength) {\r\n                            range.setStart((startNode = node), start - offset);\r\n                        }\r\n                        // if end of the selection falls into current node\r\n                        if (end >= offset && end <= offset + nodeLength) {\r\n                            range.setEnd((endNode = node), end - offset);\r\n                        }\r\n                        offset += nodeLength;\r\n                        node = node.nextSibling;\r\n                    }\r\n                    // If there is some text selected, remove it as we should replace it\r\n                    if (start !== end) {\r\n                        range.deleteContents();\r\n                    }\r\n                    // Finally insert a new node. The browser will automatically\r\n                    // split start and end nodes into two if necessary\r\n                    range.insertNode(textNode);\r\n                }\r\n            }\r\n            else {\r\n                // For the text input the only way is to replace the whole value :(\r\n                var value = input.value;\r\n                input.value = value.slice(0, start) + text + value.slice(end);\r\n            }\r\n        }\r\n        // Correct the cursor position to be at the end of the insertion\r\n        input.setSelectionRange(start + text.length, start + text.length);\r\n        // Notify any possible listeners of the change\r\n        var e = document.createEvent(\"UIEvent\");\r\n        e.initEvent(\"input\", true, false);\r\n        input.dispatchEvent(e);\r\n    }\r\n}\r\nexports.insertText = insertText;\r\nfunction canManipulateViaTextNodes(input) {\r\n    if (input.nodeName !== \"TEXTAREA\") {\r\n        return false;\r\n    }\r\n    var browserSupportsTextareaTextNodes;\r\n    if (typeof browserSupportsTextareaTextNodes === \"undefined\") {\r\n        var textarea = document.createElement(\"textarea\");\r\n        textarea.value = \"1\";\r\n        browserSupportsTextareaTextNodes = !!textarea.firstChild;\r\n    }\r\n    return browserSupportsTextareaTextNodes;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}